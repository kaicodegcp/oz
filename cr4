You’re almost there. I can’t “see” your files, but I can give you a bullet-proof checklist to confirm your certs are correct before wiring them in. Run these exactly and compare the outputs to the notes.

1) Sanity check: file types
# These MUST say "BEGIN CERTIFICATE", not "CERTIFICATE REQUEST"
head -1 wildcard.crt
head -1 wildcard-fullchain.pem

# This MUST say "BEGIN PRIVATE KEY" (and must NOT prompt for a passphrase)
head -1 wildcard-unenc.key


If you see CERTIFICATE REQUEST, that’s a CSR (wrong file).

If the key prompts for a password anywhere, it isn’t unencrypted. Fix with:

openssl rsa -in wildcard.key -out wildcard-unenc.key   # prompts once; outputs unencrypted key

2) SANs and subject (leaf cert)
openssl x509 -in wildcard.crt -noout -subject -issuer
openssl x509 -in wildcard.crt -noout -ext subjectAltName


Verify subjectAltName includes all you need, e.g.:

*.cde-k4sg67rt.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net

cde-k4sg67rt.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net

*.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net

apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net

3) Chain correctness & order

Your full chain should be: leaf first, then intermediate(s), (root optional).

Print the chain to verify Subject/Issuer steps correctly:

openssl crl2pkcs7 -nocrl -certfile wildcard-fullchain.pem \
| openssl pkcs7 -print_certs -text -noout \
| egrep 'Subject:|Issuer:'


The first “Subject” must be your wildcard; its “Issuer” should be the intermediate CA.

The last “Issuer” should be the root CA (or the intermediate if root omitted).

Functional verify (if you also have the separate intermediate/root files):

# This should return "wildcard.crt: OK"
openssl verify -untrusted Citi_Device_CA1_G2.crt -CAfile Citi_Root_CA_G2.crt wildcard.crt

4) Cert ↔ key match

These two MD5 digests must be identical:

openssl x509 -in wildcard-fullchain.pem -noout -modulus | openssl md5
openssl rsa  -in wildcard-unenc.key     -noout -modulus | openssl md5


If they differ, the key doesn’t match the leaf cert (get the right key).

5) If all the above pass → wire them into CDE (OpenShift)

Make sure your kubeconfig is set:

export KUBECONFIG=/root/kubeconfig-current.yaml
export BASE_NS="dex-base-k4sg67rt"
export APP_NS="dex-app-4n9wpd5l"


Create/replace TLS secrets (use the full chain + unencrypted key):

oc -n "$BASE_NS" create secret tls tls-dex-base \
  --cert=/root/citi-certs/wildcard-fullchain.pem \
  --key=/root/citi-certs/wildcard-unenc.key \
  --dry-run=client -o yaml | oc apply -f -

oc -n "$APP_NS"  create secret tls tls-dex-app-4n9wpd5l \
  --cert=/root/citi-certs/wildcard-fullchain.pem \
  --key=/root/citi-certs/wildcard-unenc.key \
  --dry-run=client -o yaml | oc apply -f -


Patch ingresses to point at those secrets:

oc -n "$BASE_NS" patch ing dex-base-api --type='json' \
  -p='[{"op":"add","path":"/spec/tls","value":[{"hosts":[],"secretName":"tls-dex-base"}]}]' \
|| oc -n "$BASE_NS" patch ing dex-base-api --type='json' \
  -p='[{"op":"replace","path":"/spec/tls","value":[{"hosts":[],"secretName":"tls-dex-base"}]}]'

oc -n "$APP_NS" patch ing dex-app-4n9wpd5l-api --type='json' \
  -p='[{"op":"add","path":"/spec/tls","value":[{"hosts":[],"secretName":"tls-dex-app-4n9wpd5l"}]}]' \
|| oc -n "$APP_NS" patch ing dex-app-4n9wpd5l-api --type='json' \
  -p='[{"op":"replace","path":"/spec/tls","value":[{"hosts":[],"secretName":"tls-dex-app-4n9wpd5l"}]}]'


Restart deployments (safe to run twice):

oc -n "$BASE_NS" rollout restart deploy
oc -n "$APP_NS"  rollout restart deploy


Verify:

oc -n "$APP_NS"  get ing dex-app-4n9wpd5l-api  -o jsonpath='{.spec.tls[0].secretName}{"\n"}'   # expect tls-dex-app-4n9wpd5l
oc -n "$BASE_NS" get ing dex-base-api          -o jsonpath='{.spec.tls[0].secretName}{"\n"}'   # expect tls-dex-base

6) Test HTTPS

If your workstation trusts the issuing CA chain, this should succeed without -k. Otherwise, pass --cacert pointing at the full chain (or your org root bundle).

export VC_HOST="4n9wpd5l.cde-k4sg67rt.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net"

# Try strict TLS (best)
curl -sS --fail --cacert /root/citi-certs/wildcard-fullchain.pem \
  "https://${VC_HOST}/dex/api/v1/version"

# If your local trust store doesn’t include the CA, you may still need -k
# (but with a proper corp CA, --cacert should be enough)

7) Submit SparkPi (via UI Swagger if PAT is not enabled)

Open Swagger at:

https://${VC_HOST}/dex/swagger/index.html


POST /jobs with:

{
  "name": "sparkpi",
  "type": "spark",
  "file": "local:///opt/spark/examples/jars/spark-examples_2.12-3.5.1.jar",
  "className": "org.apache.spark.examples.SparkPi",
  "arguments": ["10000"]
}


POST /jobs/sparkpi/run

GET /job-runs?jobName=sparkpi to watch status.

(If 3.5.1 jar isn’t present, switch to 3.4.1 or 3.3.2 as we did earlier.)
